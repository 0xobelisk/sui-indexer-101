  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module counter::counter_schema {

  use std::ascii::String;

  use std::ascii::string;

  use sui::package::UpgradeCap;

  use std::type_name;

  use dubhe::storage;

  use dubhe::storage_value::{Self, StorageValue};

  use dubhe::storage_map::{Self, StorageMap};

  use dubhe::storage_double_map::{Self, StorageDoubleMap};

  use sui::dynamic_field as df;

  public struct Schema has key, store {
    id: UID,
  }

  public fun borrow_value(self: &Schema): &StorageValue<u32> {
    storage::borrow_field(&self.id, b"value")
  }

  public(package) fun value(self: &mut Schema): &mut StorageValue<u32> {
    storage::borrow_mut_field(&mut self.id, b"value")
  }

  public(package) fun create(ctx: &mut TxContext): Schema {
    let mut id = object::new(ctx);
    storage::add_field<StorageValue<u32>>(&mut id, b"value", storage_value::new(b"value", ctx));
    Schema { id }
  }

  public(package) fun id(self: &mut Schema): &mut UID {
    &mut self.id
  }

  public(package) fun borrow_id(self: &Schema): &UID {
    &self.id
  }

  public fun migrate(_schema: &mut Schema, _cap: &UpgradeCap, _ctx: &mut TxContext) {}

  // ======================================== View Functions ========================================

  public fun get_value(self: &Schema): &u32 {
    self.borrow_value().get()
  }

  // =========================================================================================================
}
